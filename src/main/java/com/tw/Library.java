package com.tw;

import java.text.DecimalFormat;
import java.util.*;
import java.util.regex.Pattern;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Library {
    private List<Score> scoreList;

    public List<Score> getScoreList() {
        return scoreList;
    }

    public Library() {
        this.scoreList = new ArrayList<>();
    }

    public void printMainInterface() {
        System.out.print("1. 添加学生\n" +
                "2. 生成成绩单\n" +
                "3. 退出\n" +
                "请输入你的选择（1～3）：\n");
    }

    public void printAddStudentInterface() {
        System.out.print("请输入学生信息（格式：姓名, 学号, 学科: 成绩, ...），按回车提交：\n");
    }

    public void printGenerateTranscriptInterface() {
        System.out.print("请输入要打印的学生的学号（格式： 学号, 学号,...），按回车提交：\n");
    }

    public void printAddStudentSuccess(String name) {
        System.out.print("学生" + name + "的成绩被添加\n");
    }

    public void printAddStudentFail() {
        System.out.print("请按正确的格式输入（格式：姓名, 学号, 学科: 成绩, ...）：\n");
    }

    public boolean checkAddStudentInputFormat(String input) {
        String pattern = "([\\u4e00-\\u9fa5]+,\\d+),([\\u4e00-\\u9fa5]+:\\d+,)*[\\u4e00-\\u9fa5]+:\\d+";
        boolean isMatch = Pattern.matches(pattern, input.replace(" ", ""));
        return isMatch;
    }

    public String saveScore(String input) {
        String[] inputStrings = input.split(",");
        String name = inputStrings[0].trim();
        String number = inputStrings[1].trim();
        int math = 0, chinese = 0, english = 0, programming = 0;
        for (int i = 2; i < inputStrings.length; i++) {
            String[] scoreStrings = inputStrings[i].split(":");
            if (scoreStrings[0].trim().equals("数学")) {
                math = Integer.parseInt(scoreStrings[1].trim());
            }
            if (scoreStrings[0].trim().equals("语文")) {
                chinese = Integer.parseInt(scoreStrings[1].trim());
            }
            if (scoreStrings[0].trim().equals("英语")) {
                english = Integer.parseInt(scoreStrings[1].trim());
            }
            if (scoreStrings[0].trim().equals("编程")) {
                programming = Integer.parseInt(scoreStrings[1].trim());
            }
        }
        Score score = new Score(name, number, math, chinese, english, programming);
        scoreList.add(score);
        return name;
    }

    public void addStudent() {
        printAddStudentInterface();
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        if (checkAddStudentInputFormat(input)) {
            String name = saveScore(input);
            printAddStudentSuccess(name);
        } else {
            printAddStudentFail();
        }
    }

    public boolean checkGenerateTranscriptInputFormat(String input) {
        String pattern = "(\\d+,)*\\d+";
        boolean isMatch = Pattern.matches(pattern, input.replace(" ", ""));
        return isMatch;
    }

    public void generateTranscript() {
        printGenerateTranscriptInterface();
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        if (checkGenerateTranscriptInputFormat(input)) {
            generateTranscriptModel(input);
        } else {
            printAddStudentFail();
        }
    }

    public void generateTranscriptModel(String input) {
        String[] inputStrings = input.split(",");
        List<Score> currentScoreList = new LinkedList<>();
        List<Integer> totalScoreList = new LinkedList<>();
        int count = 0;
        int totalScore = 0;
        double averageScore = 0.0;
        double medianScore = 0.0;
        for (String currentNumber : inputStrings) {
            for (Score score : scoreList) {
                if (currentNumber.equals(score.getNumber())) {
                    int subTotalScore = score.getMathScore() + score.getChineseScore() + score.getEnglishScore() + score.getProgrammingScore();
                    score.setTotalScore(subTotalScore);
                    score.setAverageScore(subTotalScore/4.0);
                    totalScoreList.add(subTotalScore);
                    currentScoreList.add(score);
                    totalScore += subTotalScore;
                    count += 1;
                }
            }

        }
        averageScore = totalScore / count;
        medianScore = getMedianScore(totalScoreList);

        printGenerateTranscriptSuccess(currentScoreList, averageScore, medianScore);

    }

    public double getMedianScore(List<Integer> totalScoreList) {
        int length = totalScoreList.size();
        Integer[] totalScoreArray = totalScoreList.toArray(new Integer[length]);
        Arrays.sort(totalScoreArray);
        double medianScore = 0.0;
        if (length % 2 == 0) {
            medianScore = (totalScoreArray[length / 2] + totalScoreArray[length / 2 - 1]) / 2.0;
        } else {
            medianScore = totalScoreArray[length / 2];
        }
        return medianScore;
    }

    public void printGenerateTranscriptSuccess(List<Score> currentScoreList, double averageScore, double medianScore) {
        DecimalFormat decimalFormat = new DecimalFormat("###################.###########");
        String result = "成绩单\n" +
                "姓名|数学|语文|英语|编程|平均分|总分\n" +
                "========================\n";
        for (Score score : currentScoreList) {
            result += score.getName() + "|" +
                    score.getMathScore() + "|" +
                    score.getChineseScore() + "|" +
                    score.getEnglishScore() + "|" +
                    score.getProgrammingScore() + "|" +
                    decimalFormat.format(score.getAverageScore()) + "|" +
                    score.getTotalScore() + "\n";
        }
        result += "========================\n";
        result += "全班总分平均数：" + decimalFormat.format(averageScore) + "\n";
        result += "全班总分中位数：" + decimalFormat.format(medianScore) + "\n";
        System.out.print(result);
    }

    public void printGenerateTranscriptFail() {
        System.out.print("请按正确的格式输入要打印的学生的学号（格式： 学号, 学号,...），按回车提交：\n");
    }
}
