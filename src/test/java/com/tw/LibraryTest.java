package com.tw;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.Before;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.LinkedList;

import static org.junit.Assert.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class LibraryTest {
    private ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private Library library;

    private String systemOut() {
        return outContent.toString();
    }

    @Before
    public void setup() {
        library = new Library();
        System.setOut(new PrintStream(outContent));
    }

    @Test
    public void testPrintMainInterfaceMethod(){
        library.printMainInterface();
        String expectedString ="1. 添加学生\n" +
                "2. 生成成绩单\n" +
                "3. 退出\n" +
                "请输入你的选择（1～3）：\n";
        assertEquals(expectedString,systemOut());
//        assertThat(systemOut()).isEqualTo(expectedString);
//        assertThat(systemOut().endsWith("I am Tom. I know Jerry become Leader of Class 2.\n")).isTrue();
    }

    @Test
    public void testPrintAddInterfaceMethod(){
        library.printAddStudentInterface();
        String expectedString ="请输入学生信息（格式：姓名, 学号, 学科: 成绩, ...），按回车提交：\n";
        assertEquals(expectedString,systemOut());
    }

    @Test
    public void testPrintGenerateTranscriptInterfaceMethod(){
        library.printGenerateTranscriptInterface();
        String expectedString ="请输入要打印的学生的学号（格式： 学号, 学号,...），按回车提交：\n";
        assertEquals(expectedString,systemOut());
    }

    @Test
    public void testCheckAddStudentFormatSuccess(){
        boolean actual = library.checkAddStudentInputFormat("张三,000001,数学:98");
        boolean expected = true;
        assertEquals(expected,actual);
    }

    @Test
    public void testCheckAddStudentFormatFail(){
        boolean actual = library.checkAddStudentInputFormat("张三, 000001, 数学: 98, 语文:99");
        boolean expected = false;
        assertEquals(expected,actual);
    }

    @Test
    public void testAddStudentSuccess(){
        library.addStudent("张三, 000001, 数学: 98, 语文:99");
        String expectedString ="学生张三的成绩被添加\n";
        assertEquals(expectedString,systemOut());
    }

    @Test
    public void testAddStudentFail(){
        library.addStudent("张三, 000001,物理，数学: 98");
        String expectedString ="请按正确的格式输入（格式：姓名, 学号, 学科: 成绩, ...）：\n";
        assertEquals(expectedString,systemOut());
    }


//    @Test
//    public void testSomeLibraryMethod() {
//        Library classUnderTest = new Library();
//        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
//    }
//
//    @Test
//    public void testMockClass() throws Exception {
//        // you can mock concrete classes, not only interfaces
//        LinkedList mockedList = mock(LinkedList.class);
//
//        // stubbing appears before the actual execution
//        String value = "first";
//        when(mockedList.get(0)).thenReturn(value);
//
//        assertEquals(mockedList.get(0), value);
//
//    }

}
